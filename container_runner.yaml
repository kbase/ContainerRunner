max_running_tasks : 6  # max number of docker containers running simultaneously 
delete_failed: True    # delete containers that fail assertion. Defaults to false
loglevel: info         # log level to be set in python logging framework
xml_output: xml_output # what directory to write XML output to, if not set don't write XML
timeout: 60   # How long to wait for containers to complete before timing out
kill_on_timeout: True  # Do we stop the containers on timeout, or merely warn?
tasks :       # The dictionary of test tasks. Describes all the images to run
    hello_world: # Name of the task, will be displayed as part of the logs, should be informative
        command: "hello world"  # What is the 'command' that is passed to the entrypoint
        image : ubuntu:latest   # What docker image to run
        entrypoint : /bin/echo  # What is the entrypoint? In this case, we use /bin/echo
        tests:                  # List of tests to run, multiple entries are AND together
            str_match: hello    # Perform a basic string match for "hello" in the container output
    goodbye2:
        command: /etc/passwd
        image : ubuntu:latest
        entrypoint : /usr/bin/tail
        tests: # This set of tests requires both exit code 127 AND "godbye" string
            str_match: "godbye"
            exit_code: 127
    stop_dave:
        command: "Will you stop, Dave?"
        image : ubuntu:latest
        entrypoint : /bin/echo
        tests:
            regex_match: "^Will.*Dave"  # Use Python regex for match
    timeout:
        command: "90"
        image : ubuntu:latest
        env:
            KB_CELL_TIMEOUT: 10  # The KB_CELL_TIMEOUT env variable controls individual cell timeout in narrative
            SSH_AUTH_PORT: /tmp/blah
        entrypoint : /bin/sleep

